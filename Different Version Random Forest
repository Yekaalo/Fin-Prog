{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOIJzlEV7Fgm0BON472xiIq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"xpg8aEgeFyns"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["# Dif Version Random Forest"],"metadata":{"id":"7BDAkNqmoV06"}},{"cell_type":"code","source":["# GridSearchCV in order to find best parameters: n_estimators and max_depth for Random Forest Regression \n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.model_selection import GridSearchCV\n","# Create the parameter grid based on the results of random search \n","param_grid = {\n","    'max_depth': range(2,20),\n","    'n_estimators': [100, 200, 300]\n","}\n","# Create a based model\n","rf = RandomForestRegressor()\n","# Instantiate the grid search model\n","grid_search = GridSearchCV(estimator = rf, param_grid = param_grid, cv = 3)\n","\n","grid_search.fit(X_train, y_train)"],"metadata":{"id":"_DBhnALqTyIf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Best parameters found using GridSearchCV\n","grid_search.best_params_"],"metadata":{"id":"TtYCfUXTTyIg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply Random Forest Regressor Using best parameters from GridSearchCV\n","from sklearn.ensemble import RandomForestRegressor\n","forest = RandomForestRegressor(200, max_depth=17)\n","model = forest.fit(X_train, y_train)\n","predictions = forest.predict(X_test)"],"metadata":{"id":"DuhzMa_ZTyIg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import math\n","# Random Forest Regression Results: Accuracy, MSE, RMSE\n","\n","# Calculate the absolute errors\n","errors_Rf = abs(predictions - y_test)\n","# Calculate mean absolute percentage error (MAPE)\n","mape_Rf = 100 * (errors_Rf / y_test)\n","# Calculate and display accuracy\n","accuracy_Rf = 100 - np.mean(mape_Rf)\n","\n","MSE_Rf = mean_squared_error(y_test, predictions)\n","RMSE_Rf = math.sqrt(MSE_Rf)\n","\n","y_pred_tr_Rf = model.predict(X_train)\n","training_error_Rf = mean_squared_error(y_train,y_pred_tr_Rf)\n","\n","\n","print('Accuracy Random Forest:', round(accuracy_Rf, 2), '%.')\n","print(\"MSE training error Random Forest:\",training_error_Rf)\n","print('Mean squared error Random Forest:',MSE_Rf)\n","print(\"Root Mean Square Error Random Forest:\", RMSE_Rf)"],"metadata":{"id":"D45ZA-uFTyIg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","#Ploting Random Forest Regression Y-test and Y-predicted to see how well it fits\n","x_ax = range(len(y_test))\n","plt.plot(x_ax, y_test, linewidth=1, label=\"original\",)\n","plt.plot(x_ax, predictions, linewidth=1.1, label=\"predicted\", alpha = 0.6)\n","plt.title(\"y-test and y-predicted data\")\n","plt.xlabel('X-axis')\n","plt.ylabel('Y-axis')\n","plt.legend(loc='best',fancybox=True, shadow=True)\n","plt.grid(True)\n","plt.show() "],"metadata":{"id":"HRxkaLt3TyIh"},"execution_count":null,"outputs":[]}]}